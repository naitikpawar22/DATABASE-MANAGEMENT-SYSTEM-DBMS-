package com.naitik.myproject.naitik;

import java.sql.*;
import java.util.Scanner;

public class connectivity {

    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/students";
    private static final String JDBC_USER = "root";
    private static final String JDBC_PASSWORD = "root";

    private Connection connection;

    public void connect() {
        try {
            connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
            System.out.println("Connected to the database successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void addRecord(String name, int age, String city) {
        String query = "INSERT INTO records (name, age, city) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setInt(2, age);
            pstmt.setString(3, city);
            pstmt.executeUpdate();
            System.out.println("Record added successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteRecord(int id) {
        String query = "DELETE FROM records WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
            System.out.println("Record deleted successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateRecord(int id, String name, int age, String city) {
        String query = "UPDATE records SET name = ?, age = ?, city = ? WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setString(1, name);
            pstmt.setInt(2, age);
            pstmt.setString(3, city);
            pstmt.setInt(4, id);
            pstmt.executeUpdate();
            System.out.println("Record updated successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void viewRecords() {
        String query = "SELECT * FROM records";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int age = rs.getInt("age");
                String city = rs.getString("city");
                System.out.printf("ID: %d, Name: %s, Age: %d, City: %s%n", id, name, age, city);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        connectivity dbOps = new connectivity();
        dbOps.connect();

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nDatabase Operations:");
            System.out.println("1. Add Record");
            System.out.println("2. Delete Record");
            System.out.println("3. Update Record");
            System.out.println("4. View Records");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter age: ");
                    int age = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter city: ");
                    String city = scanner.nextLine();
                    dbOps.addRecord(name, age, city);
                    break;
                case 2:
                    System.out.print("Enter record ID to delete: ");
                    int deleteId = scanner.nextInt();
                    dbOps.deleteRecord(deleteId);
                    break;
                case 3:
                    System.out.print("Enter record ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter new name: ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new age: ");
                    int newAge = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter new city: ");
                    String newCity = scanner.nextLine();
                    dbOps.updateRecord(updateId, newName, newAge, newCity);
                    break;
                case 4:
                    dbOps.viewRecords();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
